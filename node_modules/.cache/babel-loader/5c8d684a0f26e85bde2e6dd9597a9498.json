{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/sg-richtext/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst inputNode = {\n  type: 'input'\n};\n\nclass RichText extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      textList: [],\n      inputIdx: -1,\n      composition: false,\n      focus: false\n    };\n    this.inputRef = null;\n    this.richText = null;\n    this.itemList = [];\n  }\n\n  componentDidMount() {\n    this.richText.addEventListener('paste', () => false);\n    const text = '这是个测试这是个测试这是个测试这是个测试这是个测试这是个测试这是个测试这是个测试这是个测试这是个测试这是个测试这是个测试这是个测试这是个测试这是个测试这是个测试这是个测试这是个测试这是个测试这是个测试';\n    const textList = text.split('').map(item => ({\n      key: Math.random(),\n      type: 'text',\n      text: item\n    }));\n    textList.splice(2, 0, {\n      key: Math.random(),\n      type: 'pause',\n      time: '2s'\n    });\n    textList.splice(5, 0, {\n      key: Math.random(),\n      type: 'speed',\n      text: '好多倍',\n      speed: 1.3\n    });\n    textList.push({\n      type: 'input'\n    });\n    this.setState({\n      textList\n    });\n  }\n\n  cursorChange(idx, e) {\n    e.stopPropagation();\n    const {\n      clientX,\n      target\n    } = e;\n    const {\n      offsetLeft,\n      offsetWidth\n    } = target;\n    const position = clientX - offsetLeft < offsetWidth / 2 ? 0 : 1;\n    let {\n      textList,\n      inputIdx,\n      focus\n    } = this.state; // textList = textList.filter(item => item.type !== 'input');\n    // TODO 元素前部单机光标跑偏\n\n    if (focus) {\n      textList.splice(inputIdx, 1);\n    } // const nextInputIdx = (idx > inputIdx ? idx - 1 : idx) + position;\n\n\n    const nextInputIdx = idx;\n    textList.splice(nextInputIdx, 0, inputNode);\n    this.setState({\n      inputIdx: nextInputIdx,\n      textList,\n      focus: true\n    }, () => {\n      this.inputRef.focus();\n    }); // console.error(idx, clientX, offsetLeft);\n  }\n\n  onInputKeyDown(e) {\n    const {\n      keyCode,\n      code,\n      target\n    } = e;\n    console.error(keyCode, code);\n    let {\n      inputIdx,\n      textList\n    } = this.state;\n    const {\n      left,\n      top\n    } = target.getBoundingClientRect();\n    const itemList = this.itemList;\n\n    switch (keyCode) {\n      case 8:\n        // 删除 backspae\n        textList.splice(inputIdx - 1, 1);\n        inputIdx--;\n        break;\n\n      case 46:\n        // 删除 delete\n        textList.splice(inputIdx + 1, 1);\n        break;\n\n      case 36:\n        // home\n        textList.unshift(...textList.splice(inputIdx, 1));\n        inputIdx = 0;\n        break;\n\n      case 35:\n        // end\n        textList.push(...textList.splice(inputIdx, 1));\n        inputIdx = textList.length - 1;\n        break;\n\n      case 37:\n        // 左\n        if (inputIdx - 1 < 0) return; // 最头部限制\n\n        [textList[inputIdx], textList[inputIdx - 1]] = [textList[inputIdx - 1], textList[inputIdx]];\n        inputIdx--;\n        break;\n\n      case 39:\n        // 右\n        if (inputIdx + 1 >= textList.length) return; // 最尾部限制\n\n        [textList[inputIdx], textList[inputIdx + 1]] = [textList[inputIdx + 1], textList[inputIdx]];\n        inputIdx++;\n        break;\n\n      case 38:\n        // 上\n        for (let i = itemList.length - 1; i >= 0; i--) {\n          const item = itemList[i];\n          if (!item) continue;\n          const {\n            left: itemLeft,\n            top: itemTop\n          } = item.getBoundingClientRect();\n\n          if (itemTop < top && itemLeft <= left) {\n            const idx = i;\n            textList.splice(idx, 0, ...textList.splice(inputIdx, 1));\n            inputIdx = idx;\n            break;\n          }\n        }\n\n        break;\n\n      case 40:\n        // 下\n        for (let i = 0, len = itemList.length; i < len; i++) {\n          const item = itemList[i];\n          if (!item) continue;\n          const {\n            left: itemLeft,\n            top: itemTop\n          } = item.getBoundingClientRect();\n\n          if (itemTop > top && itemLeft > left) {\n            const idx = i - 1;\n            textList.splice(idx, 0, ...textList.splice(inputIdx, 1));\n            inputIdx = idx;\n            break;\n          }\n        }\n\n        break;\n    }\n\n    this.setState({\n      inputIdx,\n      textList\n    });\n  }\n\n  onInputChange(e) {\n    // console.error('change', this.state.composition, e.target.innerText);\n    const {\n      composition,\n      inputIdx,\n      textList\n    } = this.state;\n\n    if (composition === false) {\n      textList.splice(inputIdx, 0, {\n        key: Math.random(),\n        type: 'text',\n        text: e.target.innerText\n      });\n      this.setState({\n        textList,\n        inputIdx: inputIdx + 1\n      });\n      this.inputRef.innerText = '';\n    }\n  }\n\n  onInputBlur() {\n    this.setState({\n      focus: false\n    });\n  } // 输入法开始\n\n\n  onInputCompositionStart(e) {\n    // console.error('start：', e.target.innerText);\n    this.setState({\n      composition: true\n    });\n  } //输入法结束\n\n\n  onInputCompositionEnd(e) {\n    // console.error('end：', e.target.innerText);\n    const {\n      textList,\n      inputIdx\n    } = this.state;\n    let valueArr = e.target.innerText.split('');\n    valueArr = valueArr.map(item => ({\n      key: Math.random(),\n      type: 'text',\n      text: item\n    }));\n    textList.splice(inputIdx, 0, ...valueArr);\n    this.setState({\n      composition: false,\n      textList,\n      inputIdx: inputIdx + valueArr.length\n    });\n    this.inputRef.innerText = '';\n  }\n\n  onPaste(e) {\n    e.preventDefault(); // 阻止粘贴\n\n    const {\n      inputIdx,\n      textList\n    } = this.state;\n    let pastedText = e.clipboardData.getData('Text');\n    const pastedNode = pastedText.split('').map(item => ({\n      key: Math.random(),\n      type: 'text',\n      text: item\n    }));\n    textList.splice(inputIdx, 0, ...pastedNode);\n    this.setState({\n      textList,\n      inputIdx: inputIdx + pastedText.length\n    });\n  }\n\n  render() {\n    const {\n      inputIdx,\n      textList,\n      composition,\n      focus\n    } = this.state;\n    console.error(focus);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rich-text\",\n      ref: node => this.richText = node,\n      children: textList.map((item, idx) => {\n        const {\n          key,\n          type,\n          text,\n          time,\n          speed\n        } = item;\n\n        switch (type) {\n          case 'text':\n            return /*#__PURE__*/_jsxDEV(\"b\", {\n              className: \"text\",\n              ref: node => this.itemList[idx] = node,\n              onClick: this.cursorChange.bind(this, idx),\n              children: text\n            }, key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 33\n            }, this);\n\n          case 'pause':\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pause\",\n              ref: node => this.itemList[idx] = node,\n              onClick: this.cursorChange.bind(this, idx),\n              children: time\n            }, key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 33\n            }, this);\n\n          case 'speed':\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"speed\",\n              ref: node => this.itemList[idx] = node,\n              onClick: this.cursorChange.bind(this, idx),\n              children: [\"[\", text, \"] \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"s\",\n                children: speed\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 233,\n                columnNumber: 46\n              }, this)]\n            }, key, true, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 33\n            }, this);\n\n          case 'input':\n            return /*#__PURE__*/_jsxDEV(\"b\", {\n              className: `input-node ${composition ? 'composition' : ''}`,\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                contentEditable: true,\n                suppressContentEditableWarning: true,\n                className: \"input\",\n                type: \"text\",\n                ref: node => this.inputRef = node,\n                onKeyDown: this.onInputKeyDown.bind(this),\n                onInput: this.onInputChange.bind(this),\n                onCompositionStart: this.onInputCompositionStart.bind(this),\n                onCompositionEnd: this.onInputCompositionEnd.bind(this),\n                onPaste: this.onPaste.bind(this),\n                onBlur: this.onInputBlur.bind(this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 37\n              }, this)\n            }, 'input', false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 33\n            }, this);\n\n          default:\n            return null;\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default RichText;","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/sg-richtext/src/App.js"],"names":["React","Component","inputNode","type","RichText","constructor","arguments","state","textList","inputIdx","composition","focus","inputRef","richText","itemList","componentDidMount","addEventListener","text","split","map","item","key","Math","random","splice","time","speed","push","setState","cursorChange","idx","e","stopPropagation","clientX","target","offsetLeft","offsetWidth","position","nextInputIdx","onInputKeyDown","keyCode","code","console","error","left","top","getBoundingClientRect","unshift","length","i","itemLeft","itemTop","len","onInputChange","innerText","onInputBlur","onInputCompositionStart","onInputCompositionEnd","valueArr","onPaste","preventDefault","pastedText","clipboardData","getData","pastedNode","render","node","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.scss';\n\nconst inputNode = { type: 'input' };\n\nclass RichText extends Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            textList: [],\n            inputIdx: -1,\n            composition: false,\n            focus: false,\n        };\n        this.inputRef = null;\n        this.richText = null;\n        this.itemList = [];\n    }\n\n    componentDidMount() {\n        this.richText.addEventListener('paste', () => false);\n\n        const text =\n            '这是个测试这是个测试这是个测试这是个测试这是个测试这是个测试这是个测试这是个测试这是个测试这是个测试这是个测试这是个测试这是个测试这是个测试这是个测试这是个测试这是个测试这是个测试这是个测试这是个测试';\n        const textList = text.split('').map(item => ({\n            key: Math.random(),\n            type: 'text',\n            text: item,\n        }));\n        textList.splice(2, 0, {\n            key: Math.random(),\n            type: 'pause',\n            time: '2s',\n        });\n        textList.splice(5, 0, {\n            key: Math.random(),\n            type: 'speed',\n            text: '好多倍',\n            speed: 1.3,\n        });\n        textList.push({\n            type: 'input',\n        });\n        this.setState({ textList });\n    }\n\n    cursorChange(idx, e) {\n        e.stopPropagation();\n        const { clientX, target } = e;\n        const { offsetLeft, offsetWidth } = target;\n        const position = clientX - offsetLeft < offsetWidth / 2 ? 0 : 1;\n\n        let { textList, inputIdx, focus } = this.state;\n        // textList = textList.filter(item => item.type !== 'input');\n        // TODO 元素前部单机光标跑偏\n        if (focus) {\n            textList.splice(inputIdx, 1);\n        }\n        // const nextInputIdx = (idx > inputIdx ? idx - 1 : idx) + position;\n        const nextInputIdx = idx;\n        textList.splice(nextInputIdx, 0, inputNode);\n        this.setState({ inputIdx: nextInputIdx, textList, focus: true }, () => {\n            this.inputRef.focus();\n        });\n\n        // console.error(idx, clientX, offsetLeft);\n    }\n\n    onInputKeyDown(e) {\n        const { keyCode, code, target } = e;\n        console.error(keyCode, code);\n        let { inputIdx, textList } = this.state;\n        const { left, top } = target.getBoundingClientRect();\n        const itemList = this.itemList;\n        switch (keyCode) {\n            case 8: // 删除 backspae\n                textList.splice(inputIdx - 1, 1);\n                inputIdx--;\n                break;\n            case 46: // 删除 delete\n                textList.splice(inputIdx + 1, 1);\n                break;\n            case 36: // home\n                textList.unshift(...textList.splice(inputIdx, 1));\n                inputIdx = 0;\n                break;\n            case 35: // end\n                textList.push(...textList.splice(inputIdx, 1));\n                inputIdx = textList.length - 1;\n                break;\n\n            case 37: // 左\n                if (inputIdx - 1 < 0) return; // 最头部限制\n                [textList[inputIdx], textList[inputIdx - 1]] = [textList[inputIdx - 1], textList[inputIdx]];\n                inputIdx--;\n\n                break;\n            case 39: // 右\n                if (inputIdx + 1 >= textList.length) return; // 最尾部限制\n                [textList[inputIdx], textList[inputIdx + 1]] = [textList[inputIdx + 1], textList[inputIdx]];\n                inputIdx++;\n\n                break;\n            case 38: // 上\n                for (let i = itemList.length - 1; i >= 0; i--) {\n                    const item = itemList[i];\n                    if (!item) continue;\n                    const { left: itemLeft, top: itemTop } = item.getBoundingClientRect();\n                    if (itemTop < top && itemLeft <= left) {\n                        const idx = i;\n                        textList.splice(idx, 0, ...textList.splice(inputIdx, 1));\n                        inputIdx = idx;\n                        break;\n                    }\n                }\n                break;\n\n            case 40: // 下\n                for (let i = 0, len = itemList.length; i < len; i++) {\n                    const item = itemList[i];\n                    if (!item) continue;\n                    const { left: itemLeft, top: itemTop } = item.getBoundingClientRect();\n                    if (itemTop > top && itemLeft > left) {\n                        const idx = i - 1;\n                        textList.splice(idx, 0, ...textList.splice(inputIdx, 1));\n                        inputIdx = idx;\n                        break;\n                    }\n                }\n                break;\n        }\n        this.setState({ inputIdx, textList });\n    }\n\n    onInputChange(e) {\n        // console.error('change', this.state.composition, e.target.innerText);\n        const { composition, inputIdx, textList } = this.state;\n        if (composition === false) {\n            textList.splice(inputIdx, 0, {\n                key: Math.random(),\n                type: 'text',\n                text: e.target.innerText,\n            });\n            this.setState({\n                textList,\n                inputIdx: inputIdx + 1,\n            });\n            this.inputRef.innerText = '';\n        }\n    }\n\n    onInputBlur() {\n        this.setState({ focus: false });\n    }\n\n    // 输入法开始\n    onInputCompositionStart(e) {\n        // console.error('start：', e.target.innerText);\n        this.setState({ composition: true });\n    }\n\n    //输入法结束\n    onInputCompositionEnd(e) {\n        // console.error('end：', e.target.innerText);\n        const { textList, inputIdx } = this.state;\n        let valueArr = e.target.innerText.split('');\n        valueArr = valueArr.map(item => ({\n            key: Math.random(),\n            type: 'text',\n            text: item,\n        }));\n        textList.splice(inputIdx, 0, ...valueArr);\n\n        this.setState({\n            composition: false,\n            textList,\n            inputIdx: inputIdx + valueArr.length,\n        });\n        this.inputRef.innerText = '';\n    }\n\n    onPaste(e) {\n        e.preventDefault(); // 阻止粘贴\n        const { inputIdx, textList } = this.state;\n        let pastedText = e.clipboardData.getData('Text');\n        const pastedNode = pastedText.split('').map(item => ({\n            key: Math.random(),\n            type: 'text',\n            text: item,\n        }));\n        textList.splice(inputIdx, 0, ...pastedNode);\n        this.setState({ textList, inputIdx: inputIdx + pastedText.length });\n    }\n\n    render() {\n        const { inputIdx, textList, composition, focus } = this.state;\n        console.error(focus);\n        return (\n            <div className='rich-text' ref={node => (this.richText = node)}>\n                {textList.map((item, idx) => {\n                    const { key, type, text, time, speed } = item;\n                    switch (type) {\n                        case 'text':\n                            return (\n                                <b\n                                    key={key}\n                                    className='text'\n                                    ref={node => (this.itemList[idx] = node)}\n                                    onClick={this.cursorChange.bind(this, idx)}\n                                >\n                                    {text}\n                                </b>\n                            );\n                        case 'pause':\n                            return (\n                                <div\n                                    key={key}\n                                    className='pause'\n                                    ref={node => (this.itemList[idx] = node)}\n                                    onClick={this.cursorChange.bind(this, idx)}\n                                >\n                                    {time}\n                                </div>\n                            );\n                        case 'speed':\n                            return (\n                                <div\n                                    key={key}\n                                    className='speed'\n                                    ref={node => (this.itemList[idx] = node)}\n                                    onClick={this.cursorChange.bind(this, idx)}\n                                >\n                                    [{text}] <span className='s'>{speed}</span>\n                                </div>\n                            );\n                        case 'input':\n                            return (\n                                <b key='input' className={`input-node ${composition ? 'composition' : ''}`}>\n                                    <span\n                                        contentEditable\n                                        suppressContentEditableWarning\n                                        className='input'\n                                        type='text'\n                                        ref={node => (this.inputRef = node)}\n                                        onKeyDown={this.onInputKeyDown.bind(this)}\n                                        onInput={this.onInputChange.bind(this)}\n                                        onCompositionStart={this.onInputCompositionStart.bind(this)}\n                                        onCompositionEnd={this.onInputCompositionEnd.bind(this)}\n                                        onPaste={this.onPaste.bind(this)}\n                                        onBlur={this.onInputBlur.bind(this)}\n                                    ></span>\n                                </b>\n                            );\n                        default:\n                            return null;\n                    }\n                })}\n            </div>\n        );\n    }\n}\n\nexport default RichText;\n"]},"metadata":{},"sourceType":"module"}